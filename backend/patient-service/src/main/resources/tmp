import React, { useEffect, useState } from 'react';
import { over } from 'stompjs';
import SockJS from 'sockjs-client';
import axios from 'axios';

let stompClient = null;

const ChatRoom = (props) => {
    const [privateChats, setPrivateChats] = useState([]);
    const [userData, setUserData] = useState({
        senderId: '',
        receiverId: '',
        consultationId: 123,
        connected: false,
        message: ''
    });

    const connect = () => {
        let Sock = new SockJS('http://localhost:8085/chat');
        stompClient = over(Sock);
        stompClient.connect({}, onConnected, onError);
    }

    const onConnected = async () => {
        setUserData({ ...userData, "connected": true });
        try {
            const response = await axios.get(`http://localhost:8085/chat/get-messages/${props.consultationId}`);
            console.log(response.data);
            // Update privateChats state with the fetched messages
            setPrivateChats(response.data);
        } catch (error) {
            console.error('Error fetching messages:', error);
        }
        stompClient.subscribe(`/topic/${props.consultationId}/messages`, onPrivateMessage);
    }

    const onPrivateMessage = (payload) => {
        const payloadData = JSON.parse(payload.body);
        setPrivateChats(prevChats => [...prevChats, payloadData]);
    }

    const onError = (err) => {
        console.log(err);
    }

    const handleMessage = (event) => {
        const { value } = event.target;
        setUserData({ ...userData, "message": value });
    }

    const sendPrivateValue = () => {
        if (stompClient) {
            const message = {
                consultationId: userData.consultationId,
                senderId: userData.senderId,
                receiverId: userData.receiverId,
                messageContent: userData.message
            };

            stompClient.send(`/app/chat/${props.consultationId}`, {}, JSON.stringify(message));
            setUserData({ ...userData, "message": "" });
        }
    }

    const handleUsername = (event) => {
        const { value } = event.target;
        setUserData({ ...userData, "senderId": value });
    }

    const handleReceivername = (event) => {
        const { value } = event.target;
        setUserData({ ...userData, "receiverId": value });
    }

    const registerUser = () => {
        connect();
    }

    return (
        <div className="container">
            {userData.connected ?
                <div className="chat-box">
                    <div className="chat-content">
                        <ul className="chat-messages">
                            {privateChats.map((chat, index) => (

                                <li className={`message ${chat.senderId == userData.senderId ? "self" : ""}`} key={index}>

                                    {chat.senderId != userData.senderId && <div className="avatar">{chat.senderId}</div>}
                                    <div className={`message-data ${chat.senderId === userData.senderId ? "self" : ""}`}>{chat.messageContent}</div>
                                    {chat.senderId == userData.senderId && <div className="avatar self">{chat.senderId}</div>}
                                </li>
                            ))}
                        </ul>

                        <div className="send-message">
                            <input type="text" className="input-message" placeholder="Enter your message" value={userData.message} onChange={handleMessage} />
                            <button type="button" className="send-button" onClick={sendPrivateValue}>Send</button>
                        </div>
                    </div>
                </div>
                :
                <div className="register">
                    <input
                        id="user-name"
                        placeholder="Enter your senderId"
                        name="userName"
                        value={userData.senderId}
                        onChange={handleUsername}
                        margin="normal"
                    />
                    <input
                        id="receiver-name"
                        placeholder="Enter receiver's receiverId"
                        name="receiverName"
                        value={userData.receiverId}
                        onChange={handleReceivername}
                        margin="normal"
                    />
                    <button type="button" onClick={registerUser}>
                        Connect
                    </button>
                </div>}
        </div>
    )
}

export default ChatRoom;

----------------------------------------------------------------------------------------------------------------------------------------------------
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

input {
  padding: 10px;
  font-size: 1.2em;
}
button{
  border: none;
  padding: 10px;
  background: green;
  color:#fff;
  font-size: 1.2em;
  font-weight: bold;
}


.container{
  position: relative;
}

.register{
  position: fixed;
  padding:30px;
  box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.034),0 6.7px 5.3px rgba(0, 0, 0, 0.048),0 12.5px 10px rgba(0, 0, 0, 0.06),0 22.3px 17.9px rgba(0, 0, 0, 0.072),0 41.8px 33.4px rgba(0, 0, 0, 0.086),0 100px 80px rgba(0, 0, 0, 0.12);
  top:35%;
  left:32%;
  display: flex;
  flex-direction: row;
}
.chat-box{
  box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.034),0 6.7px 5.3px rgba(0, 0, 0, 0.048),0 12.5px 10px rgba(0, 0, 0, 0.06),0 22.3px 17.9px rgba(0, 0, 0, 0.072),0 41.8px 33.4px rgba(0, 0, 0, 0.086),0 100px 80px rgba(0, 0, 0, 0.12);
  margin:40px 50px;
  height: 600px;
  padding: 10px;
  display: flex;
  flex-direction: row;
}

.member-list{
  width: 20%;
}

.chat-content{
  width:80%;
  margin-left: 10px;
}

.chat-messages{
  height: 80%;
  border: 1px solid #000;
  display: flex;
  flex-direction: column;

}

.send-message{
  width: 100%;
  display: flex;
  flex-direction: row;
}

.input-message{
  width:90%;
  border-radius: 50px;
}

ul {
  padding: 0;
  list-style-type: none;
}
.send-button{
  width:10%;
  border-radius: 50px;
  margin-left: 5px;
  cursor: pointer;
}
.member{
  padding: 10px;
  background: #eee;
  border:#000;
  cursor: pointer;
  margin: 5px 2px;
  box-shadow: 0 8px 8px -4px lightblue;
}
.member.active{
  background: blueviolet;
  color:#fff;
}
.member:hover{
  background: grey;
  color:#fff;
}

.avatar{
  background-color: cornflowerblue;
  padding: 3px 5px;
  border-radius: 5px;
  color:#fff;
  justify-content: flex-end;
}

.message{
  padding:5px;
  display: flex;
  flex-direction: row;
  box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
  margin: 5px 10px;
}
.message-data{
  padding:5px;
}
.message.self{
  justify-content: end;
}

.message .self {
  background-color: cornflowerblue;
  color: #fff;
}
.self{
  color:#000;
  background-color: greenyellow;
  justify-content: flex-end;
}

-------------------------------------------------------------------------------------------------------

import React from 'react';
import ChatRoom from './components/ChatRoom';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>WebSocket Chat Application</h1>
      </header>
      <main>
        <ChatRoom consultationId={1} /> {/* Replace 1 with your desired consultation ID */}
      </main>
    </div>
  );
}

export default App;
